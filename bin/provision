#!/usr/bin/env bash

set -e

printf "\n\n****** Installing Linux dependencies"
sudo apt-get -y install build-essential libssl-dev libreadline-dev zlib1g-dev nginx

if ! command -v certbot; then
    printf "\n\n****** Setting Up Certbot"
    sudo apt-get update
    sudo apt-get -y install software-properties-common
    sudo add-apt-repository -y universe
    sudo add-apt-repository -y ppa:certbot/certbot
    sudo apt-get update
    sudo apt-get -y install certbot python-certbot-nginx
fi

EXPORT_RBENV_PATH="export PATH='$HOME/.rbenv/bin:$HOME/.rbenv/shims:$PATH'"

eval $EXPORT_RBENV_PATH
if ! command -v rbenv; then
    printf "\n\n****** Installing rbenv"
    curl -fsSL https://github.com/rbenv/rbenv-installer/raw/master/bin/rbenv-installer | bash
    echo $EXPORT_RBENV_PATH >> ~/.bashrc
fi

if ! [ -d '/vagrant' ]; then
    printf "\n\n****** Pulling repo"
    git pull
fi

if ! command -v ruby || ! ruby -v; then
    printf "\n\n****** Installing Ruby"
    rbenv install
    gem install bundler
fi

crontab -r
sudo mkdir -p public log tmp
sudo chown -R $USER:$USER public log tmp
export RUN_CMD="$PWD/bin/run $PWD/public"

if [ "$RACK_ENV" == "development" ]; then
    printf "\n\n****** Installing Development Gems"
    bundle
    printf "\n\n****** Setting Up Crontab"
    echo "* * * * * PATH=$PATH $RUN_CMD" | crontab
else
    printf "\n\n****** Installing Production Gems"
    bundle install --without development test
    printf "\n\n****** Setting Up Crontab"
    echo "0 * * * * PATH=$PATH $RUN_CMD" | crontab
    printf "\n\n****** Generating feed.xml"
fi

printf "\n\n****** Setting Up Nginx and Puma"
erb "$PWD/config/hnjobs.erb" | sudo tee /etc/nginx/sites-available/default > /dev/null
sudo ln -sf /etc/nginx/sites-available/default /etc/nginx/sites-enabled/default
erb "$PWD/config/puma.service.erb" | sudo tee /etc/systemd/system/puma.service > /dev/null


eval $RUN_CMD

restart_servers () {
    if ! [ -d '/vagrant' ]; then
        sudo certbot run --nginx -n --domains hnjobs.cncf.io --redirect
    fi
    sudo systemctl enable puma
    sudo systemctl enable nginx
    sudo systemctl restart puma
    sudo systemctl restart nginx
}

export -f restart_servers

nohup bash -c 'sleep 5 && restart_servers' &

printf "\n\n****** Provisioning complete. Restarting..."
